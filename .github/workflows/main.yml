# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on: workflow_dispatch


env:
  AWS_REGION: eu-west-2                        # set this to your preferred AWS region, e.g. us-west-1
  ECS_CLUSTER: AIAPP_2                         # set this to your Amazon ECS cluster name
  ECS_SERVICE: AIAPP_2                         # set this to your Amazon ECS service name
  ECS_TASK_DEFINITION: .aws/task-definition.json  # set this to the path to your Amazon ECS task definition

  ECR_REPOSITORY_FRONTEND: llms/frontend-streamlit      # set this to your Amazon ECR repository name
  ECR_REPOSITORY_BACKEND: llms/aiapp-backend      # set this to your Amazon ECR repository name
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME_FRONTEND: aiapp-frontend               # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  CONTAINER_NAME_BACKEND: aiapp-backend            # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  CONTAINER_NAME_OTEL: opentelemetry            # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  API_HOSTNAME: "localhost"                     # set this to the hostname of your API
  AWS_BUCKET: "llms.ismaelpapa.com"
  OTEL_SERVICE_NAME: "aiapp-fargate"
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
  OTEL_RESOURCE_ATTRIBUTES: "deployment.environment=aiapp-fargate,service.version=1.0"

  METRICS_TO_EXCLUDE: "[]"
  SPLUNK_CONFIG: "/etc/otel/collector/fargate_config.yaml"
  ECS_METADATA_EXCLUDED_IMAGES: "[\"quay.io/signalfx/splunk-otel-collector:latest\"]"

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        id: build-image-backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
          image: ${{ steps.build-image-frontend.outputs.image }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-backend  
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_BACKEND}}
          image: ${{ steps.build-image-backend.outputs.image }}
          
          
      - name: Add environment variables to ECS task definition for FRONTEND CONTAINER
        id: add-env-var-fe
        uses: cvmaker-bv/amazon-ecs-task-environment@v1
        env:
          API_HOSTNAME: ${{ env.API_HOSTNAME }}
          #AWS variables
          AWS_BUCKET: ${{ env.AWS_BUCKET }}
          ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          #authlib variables
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          REDIRECT_URI: ${{ secrets.REDIRECT_URI }}
          REFRESH_TOKEN_URL: ${{ secrets.REFRESH_TOKEN_URL }}
          SCOPE: ${{ secrets.SCOPE }}
          TOKEN_URL: ${{ secrets.TOKEN_URL }}
          AUTHORIZE_URL: ${{ secrets.AUTHORIZE_URL }}

        with:
          task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
          env-variables: "${{ toJson(env) }}"

      - name: Add environment variables to ECS task definition for BACKEND CONTAINER
        id: add-env-var-bk
        uses: cvmaker-bv/amazon-ecs-task-environment@v1
        env:
          #OTEL variables
          OTEL_SERVICE_NAME: ${{ env.OTEL_SERVICE_NAME }}
          OTEL_RESOURCE_ATTRIBUTES: ${{ env.OTEL_RESOURCE_ATTRIBUTES }}
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ env.OTEL_EXPORTER_OTLP_ENDPOINT }}

        with:
          task-definition: ${{ steps.add-env-var-fe.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_BACKEND }}
          env-variables: "${{ toJson(env) }}"

      - name: Add environment variables to ECS task definition for OTEL CONTAINER
        id: add-env-var-otel
        uses: cvmaker-bv/amazon-ecs-task-environment@v1
        env:
          #OTEL variables
          METRICS_TO_EXCLUDE: ${{ env.METRICS_TO_EXCLUDE }}
          SPLUNK_CONFIG: ${{ env.SPLUNK_CONFIG }}
          SPLUNK_REALM: ${{ secrets.SPLUNK_REALM }}
          SPLUNK_HEC_URL: ${{ secrets.SPLUNK_HEC_URL }}
          SPLUNK_ACCESS_TOKEN: ${{ secrets.SPLUNK_ACCESS_TOKEN }}
          SPLUNK_HEC_TOKEN: ${{ secrets.SPLUNK_HEC_TOKEN }}
          ECS_METADATA_EXCLUDED_IMAGES: ${{ env.ECS_METADATA_EXCLUDED_IMAGES }}

        with:
          task-definition: ${{ steps.add-env-var-bk.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_OTEL }}
          env-variables: "${{ toJson(env) }}"

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.add-env-var-otel.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
