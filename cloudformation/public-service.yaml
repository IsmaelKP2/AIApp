AWSTemplateFormatVersion: "2010-09-09"

Description: Deploy a service on AWS Fargate, hosted in a public subnet, and accessible via a public load balancer.

Parameters:
  StackName:
    Description: The name of the parent Fargate networking stack that you created. Necessary to locate and reference resources created by that stack.
    Type: String
    Default: AIAPP

  ContainerNameFrontend:
    Description: The name of the frontend container
    Type: String
    Default: aiapp-frontend

  ContainerNameBackend:
    Description: The name of the backend container
    Type: String
    Default: aiapp-backend
  ContainerNameOtel:
    Description: The name of the otel container
    Type: String
    Default: opentelemetry
    
  ServiceName:
    Description: A name for the service
    Type: String
    Default: AIAPP

  ImageUrlFrontend:
    Description: The url of a docker image that contains the application process that will handle the traffic for this service
    Type: String
    Default: 277707112540.dkr.ecr.eu-west-2.amazonaws.com/llms/aiapp-frontend:latest

  ImageUrlBackend:
    Description: The url of a docker image that contains the application process that will handle the traffic for this service
    Type: String
    Default: 277707112540.dkr.ecr.eu-west-2.amazonaws.com/llms/aiapp-backend:latest

  ImageUrlOtel:
    Description: The url of a docker image that contains the application process that will handle the traffic for this service
    Type: String
    Default: quay.io/signalfx/splunk-otel-collector:latest

  ContainerPortFrontend:
    Description: What port number the application inside the docker container is binding to
    Type: Number
    Default: 80

  ContainerPortBackend:
    Description: What port number the application inside the docker container is binding to
    Type: Number
    Default: 8000

  ContainerCpuTask:
    Description: How much CPU to give the task. 1024 is 1 CPU
    Type: Number
    Default: 2048

  ContainerMemoryTask:
    Description: How much memory in megabytes to give the task
    Type: Number
    Default: 4096

  ContainerCpu:
    Description: How much CPU to give the container. 1024 is 1 CPU
    Type: Number
    Default: 512

  ContainerMemory:
    Description: How much memory in megabytes to give the container
    Type: Number
    Default: 512
  
  ContainerMemoryBK:
    Description: How much memory in megabytes to give the container
    Type: Number
    Default: 3072

  Path:
    Description: A path on the public load balancer that this service should be connected to. Use * to send all load balancer traffic to this service.
    Type: String
    Default: '*'

  Priority:
    Description: The priority for the routing rule added to the load balancer. This only applies if your have multiple services which have been assigned to different paths on the load balancer.
    Type: Number
    Default: 1

  DesiredCount:
    Description: How many copies of the service task to run
    Type: Number
    Default: 1

  Role:
    Description: (Optional) An IAM role to give the service's containers if the code within needs to access other AWS resources like S3 buckets, DynamoDB tables, etc
    Type: String
    Default: ""

Conditions:
  HasCustomRole: !Not
    - !Equals
      - !Ref Role
      - ""

Resources:

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceName
      Cpu: !Ref ContainerCpuTask
      Memory: !Ref ContainerMemoryTask
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !ImportValue
        Fn::Join:
          - ':'
          - - !Ref StackName
            - ECSTaskExecutionRole
      TaskRoleArn: !If
        - HasCustomRole
        - !Ref Role
        - !Ref AWS::NoValue
      ContainerDefinitions:
        - Name: !Ref ContainerNameFrontend
          Essential: true
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref ImageUrlFrontend
          PortMappings:
            - ContainerPort: !Ref ContainerPortFrontend
          LogConfiguration: 
            LogDriver: "awslogs"
            Options: 
              awslogs-group: "/ecs/AIApp"
              mode: "non-blocking"
              awslogs-create-group: "true"
              max-buffer-size: "25m"
              awslogs-region: "eu-west-2"
              awslogs-stream-prefix: "ecs"
        - Name: !Ref ContainerNameBackend
          Essential: false
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemoryBK
          Image: !Ref ImageUrlBackend
          PortMappings:
            - ContainerPort: !Ref ContainerPortBackend
          LogConfiguration: 
            LogDriver: "awslogs"
            Options: 
              awslogs-group: "/ecs/AIApp"
              mode: "non-blocking"
              awslogs-create-group: "true"
              max-buffer-size: "25m"
              awslogs-region: "eu-west-2"
              awslogs-stream-prefix: "ecs"
        - Name: !Ref ContainerNameOtel
          Essential: true
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref ImageUrlOtel
          # PortMappings:
            # - ContainerPort: !Ref ContainerPort
      RuntimePlatform:        
        CpuArchitecture: "X86_64"
        OperatingSystemFamily: "LINUX"

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !ImportValue
        Fn::Join:
          - ':'
          - - !Ref StackName
            - ClusterName
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !ImportValue
              Fn::Join:
                - ':'
                - - !Ref StackName
                  - FargateContainerSecurityGroup
          Subnets:
            - !ImportValue
              Fn::Join:
                - ':'
                - - !Ref StackName
                  - PublicSubnetOne
            - !ImportValue
              Fn::Join:
                - ':'
                - - !Ref StackName
                  - PublicSubnetTwo
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ContainerNameFrontend
          ContainerPort: !Ref ContainerPortFrontend
          TargetGroupArn: !Ref TargetGroup

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref ServiceName
      Port: !Ref ContainerPortFrontend
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue
        Fn::Join:
          - ':'
          - - !Ref StackName
            - VPCId

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      ListenerArn: !ImportValue
        Fn::Join:
          - ':'
          - - !Ref StackName
            - PublicListener
      Priority: !Ref Priority
